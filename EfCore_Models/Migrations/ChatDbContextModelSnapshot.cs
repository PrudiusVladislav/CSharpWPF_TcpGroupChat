// <auto-generated />
using System;
using Ef_Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SharedComponents.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    partial class ChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ef_Models.ChatModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChatModel");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ChatModel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ef_Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Ef_Models.ClientsGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("GroupId");

                    b.ToTable("ClientsGroups");
                });

            modelBuilder.Entity("Ef_Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatModelId")
                        .HasColumnType("int");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfSending")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatModelId");

                    b.HasIndex("SenderClientId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Ef_Models.Group", b =>
                {
                    b.HasBaseType("Ef_Models.ChatModel");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("GroupName")
                        .IsUnique()
                        .HasFilter("[GroupName] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Group");
                });

            modelBuilder.Entity("Ef_Models.PersonalChat", b =>
                {
                    b.HasBaseType("Ef_Models.ChatModel");

                    b.Property<int>("FirstClientId")
                        .HasColumnType("int");

                    b.Property<int>("SecondClientId")
                        .HasColumnType("int");

                    b.HasIndex("FirstClientId");

                    b.HasIndex("SecondClientId");

                    b.HasDiscriminator().HasValue("PersonalChat");
                });

            modelBuilder.Entity("Ef_Models.ClientsGroups", b =>
                {
                    b.HasOne("Ef_Models.Client", "Client")
                        .WithMany("ClientGroups")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ef_Models.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Ef_Models.Message", b =>
                {
                    b.HasOne("Ef_Models.ChatModel", "ChatModel")
                        .WithMany("Messages")
                        .HasForeignKey("ChatModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ef_Models.Client", "SenderClient")
                        .WithMany()
                        .HasForeignKey("SenderClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatModel");

                    b.Navigation("SenderClient");
                });

            modelBuilder.Entity("Ef_Models.PersonalChat", b =>
                {
                    b.HasOne("Ef_Models.Client", "FirstClient")
                        .WithMany()
                        .HasForeignKey("FirstClientId")
                        .IsRequired();

                    b.HasOne("Ef_Models.Client", "SecondClient")
                        .WithMany()
                        .HasForeignKey("SecondClientId")
                        .IsRequired();

                    b.Navigation("FirstClient");

                    b.Navigation("SecondClient");
                });

            modelBuilder.Entity("Ef_Models.ChatModel", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Ef_Models.Client", b =>
                {
                    b.Navigation("ClientGroups");
                });

            modelBuilder.Entity("Ef_Models.Group", b =>
                {
                    b.Navigation("GroupMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
